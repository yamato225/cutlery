{"ast":null,"code":"'use strict';\n\nvar websocket = require('websocket-stream');\n\nvar urlModule = require('url');\n\nvar WSS_OPTIONS = ['rejectUnauthorized', 'ca', 'cert', 'key', 'pfx', 'passphrase'];\nvar IS_BROWSER = process.title === 'browser';\n\nfunction buildUrl(opts, client) {\n  var url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n\n  if (typeof opts.transformWsUrl === 'function') {\n    url = opts.transformWsUrl(url, opts, client);\n  }\n\n  return url;\n}\n\nfunction setDefaultOpts(opts) {\n  if (!opts.hostname) {\n    opts.hostname = 'localhost';\n  }\n\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      opts.port = 443;\n    } else {\n      opts.port = 80;\n    }\n  }\n\n  if (!opts.path) {\n    opts.path = '/';\n  }\n\n  if (!opts.wsOptions) {\n    opts.wsOptions = {};\n  }\n\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {\n        opts.wsOptions[prop] = opts[prop];\n      }\n    });\n  }\n}\n\nfunction createWebSocket(client, opts) {\n  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  setDefaultOpts(opts);\n  var url = buildUrl(opts, client);\n  return websocket(url, [websocketSubProtocol], opts.wsOptions);\n}\n\nfunction buildBuilder(client, opts) {\n  return createWebSocket(client, opts);\n}\n\nfunction buildBuilderBrowser(client, opts) {\n  if (!opts.hostname) {\n    opts.hostname = opts.host;\n  }\n\n  if (!opts.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof document === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.');\n    }\n\n    var parsed = urlModule.parse(document.URL);\n    opts.hostname = parsed.hostname;\n\n    if (!opts.port) {\n      opts.port = parsed.port;\n    }\n  }\n\n  return createWebSocket(client, opts);\n}\n\nif (IS_BROWSER) {\n  module.exports = buildBuilderBrowser;\n} else {\n  module.exports = buildBuilder;\n}","map":{"version":3,"sources":["/react/cutlery/web-console/node_modules/mqtt/lib/connect/ws.js"],"names":["websocket","require","urlModule","WSS_OPTIONS","IS_BROWSER","process","title","buildUrl","opts","client","url","protocol","hostname","port","path","transformWsUrl","setDefaultOpts","wsOptions","forEach","prop","hasOwnProperty","createWebSocket","websocketSubProtocol","protocolId","protocolVersion","buildBuilder","buildBuilderBrowser","host","document","Error","parsed","parse","URL","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar websocket = require('websocket-stream')\nvar urlModule = require('url')\nvar WSS_OPTIONS = [\n  'rejectUnauthorized',\n  'ca',\n  'cert',\n  'key',\n  'pfx',\n  'passphrase'\n]\nvar IS_BROWSER = process.title === 'browser'\n\nfunction buildUrl (opts, client) {\n  var url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path\n  if (typeof (opts.transformWsUrl) === 'function') {\n    url = opts.transformWsUrl(url, opts, client)\n  }\n  return url\n}\n\nfunction setDefaultOpts (opts) {\n  if (!opts.hostname) {\n    opts.hostname = 'localhost'\n  }\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      opts.port = 443\n    } else {\n      opts.port = 80\n    }\n  }\n  if (!opts.path) {\n    opts.path = '/'\n  }\n\n  if (!opts.wsOptions) {\n    opts.wsOptions = {}\n  }\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {\n        opts.wsOptions[prop] = opts[prop]\n      }\n    })\n  }\n}\n\nfunction createWebSocket (client, opts) {\n  var websocketSubProtocol =\n    (opts.protocolId === 'MQIsdp') && (opts.protocolVersion === 3)\n      ? 'mqttv3.1'\n      : 'mqtt'\n\n  setDefaultOpts(opts)\n  var url = buildUrl(opts, client)\n  return websocket(url, [websocketSubProtocol], opts.wsOptions)\n}\n\nfunction buildBuilder (client, opts) {\n  return createWebSocket(client, opts)\n}\n\nfunction buildBuilderBrowser (client, opts) {\n  if (!opts.hostname) {\n    opts.hostname = opts.host\n  }\n\n  if (!opts.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof (document) === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.')\n    }\n    var parsed = urlModule.parse(document.URL)\n    opts.hostname = parsed.hostname\n\n    if (!opts.port) {\n      opts.port = parsed.port\n    }\n  }\n  return createWebSocket(client, opts)\n}\n\nif (IS_BROWSER) {\n  module.exports = buildBuilderBrowser\n} else {\n  module.exports = buildBuilder\n}\n"]},"metadata":{},"sourceType":"script"}